Milestone 1: Representation
Due Wednesday, Nov 9th

For this milestone, you will need to be able to represent the board game in Haskell, make moves on the board game, and tell if a player has won the board game. You should have a variable defined that represents the initial game state. I should be able to play the game by loading your code in GHCI and calling functions you have defined. I suggest data types (or possibly type aliases) to represent:

        * The state of the board game, including both tangible and intangible components.

                * Tangible components includes pieces and their locations. 

                * Intangible components may include whose turn it is, what the current bet in, or any other information not represented on the game board, but critical to game play.

        * A move on the game board.

        * The winner of a game.

I suggest functions that compute:

        * The winner of a game state.

        * The result of making a move on a game state.

        * What moves are legal for a game state.

        * A pretty show function for a game state, to ease debugging.

Full Credit: All of these functions should consider possible errors or edge cases: what if there no winner, what if the move is not legal for the current game, etc. Use Maybe's or Either's appropriately.
